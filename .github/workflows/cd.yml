name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main, develop]
    types:
      - completed
  release:
    types: [published]
  push:
    tags:
      - 'v*'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
      
      - name: Determine target environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "target=production" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "target=production" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "target=development" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ steps.env.outputs.target }}
  
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      
      - name: Deploy to development server
        env:
          DOCKER_HOST: ${{ secrets.DEV_SERVER_HOST }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Pull the latest image
          docker pull ${DOCKER_IMAGE}
          
          # Create or update .env file
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=api_performance
          MYSQL_USER=api_user
          MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
          EOF
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
          EOL
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy files to server
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.dev.yml deploy.sh ${DOCKER_HOST}:~/
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no ${DOCKER_HOST} './deploy.sh'
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
      
      - name: Deploy to production server
        env:
          DOCKER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Pull the latest image
          docker pull ${DOCKER_IMAGE}
          
          # Create or update .env file
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=api_performance
          MYSQL_USER=api_user
          MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          EOF
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          EOL
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy files to server
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.prod.yml deploy.sh ${DOCKER_HOST}:~/
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no ${DOCKER_HOST} './deploy.sh'

  deploy-lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Generate deployment package
        run: |
          # Create a temporary directory for the package
          mkdir -p deployment-package
          
          # Export dependencies
          poetry export --without-hashes --format=requirements.txt > requirements.txt
          
          # Install dependencies into the package directory
          pip install -r requirements.txt --target deployment-package
          
          # Copy application code
          cp -r app deployment-package/
          cp main.py deployment-package/
          
          # Create ZIP file
          cd deployment-package
          zip -r ../lambda-package.zip .
          cd ..
      
      - name: Update Lambda Function
        run: |
          # Extract version from tag
          VERSION=${{ github.ref_name }}
          
          # Update Lambda function code directly with ZIP file
          aws lambda update-function-code \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-package.zip
          
          # Wait for function code update to complete
          aws lambda wait function-updated \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
          
          # Update Lambda configuration
          aws lambda update-function-configuration \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --handler main.handler \
            --runtime python3.9 \
            --timeout 30 \
            --memory-size 256 \
            --environment Variables="{
              STAGE=production,
              MYSQL_SERVER=${{ secrets.PROD_MYSQL_SERVER }},
              MYSQL_PORT=${{ secrets.PROD_MYSQL_PORT }},
              MYSQL_USER=${{ secrets.PROD_MYSQL_USER }},
              MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }},
              MYSQL_DB=${{ secrets.PROD_MYSQL_DB }},
              REDIS_HOST=${{ secrets.PROD_REDIS_HOST }},
              REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
            }"
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
          
          # Publish new version
          aws lambda publish-version \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --description "Deployment of version $VERSION"