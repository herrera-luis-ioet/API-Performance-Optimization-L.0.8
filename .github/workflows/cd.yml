name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main, develop]
    types:
      - completed
  release:
    types: [published]
  push:
    tags:
      - 'v*'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
      
      - name: Determine target environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "target=production" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "target=production" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "target=development" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ steps.env.outputs.target }}
  
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      
      - name: Deploy to development server
        env:
          DOCKER_HOST: ${{ secrets.DEV_SERVER_HOST }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Pull the latest image
          docker pull ${DOCKER_IMAGE}
          
          # Create or update .env file
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=api_performance
          MYSQL_USER=api_user
          MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
          EOF
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
          EOL
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy files to server
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.dev.yml deploy.sh ${DOCKER_HOST}:~/
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no ${DOCKER_HOST} './deploy.sh'
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
      
      - name: Deploy to production server
        env:
          DOCKER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Pull the latest image
          docker pull ${DOCKER_IMAGE}
          
          # Create or update .env file
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=api_performance
          MYSQL_USER=api_user
          MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          EOF
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          EOL
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy files to server
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.prod.yml deploy.sh ${DOCKER_HOST}:~/
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no ${DOCKER_HOST} './deploy.sh'

  deploy-lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Generate deployment package
        run: |
          # Create a temporary directory for the package
          mkdir -p deployment-package
          
          # Export dependencies
          poetry export -f requirements.txt --without-hashes > requirements.txt
          
          # Install dependencies into the package directory
          pip install -r requirements.txt --target deployment-package
          
          # Copy application code
          cp -r app/* deployment-package/
          
          # Create ZIP file
          cd deployment-package
          zip -r ../lambda-package.zip .
          cd ..
      
      - name: Update Lambda Function
        run: |
          # Extract version from tag
          VERSION=${{ github.ref_name }}
          FUNCTION_NAME=${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
          
          # Function to check Lambda state with detailed status and conflict handling
          check_lambda_state() {
            echo "Checking Lambda function state..."
            
            # Get function details with error handling and retry for conflicts
            local max_retries=${MAX_RETRIES:-8}  # Configurable retries
            local retry_count=0
            local retry_delay=${INITIAL_WAIT:-10}  # Configurable initial delay
            local backoff_multiplier=${BACKOFF_MULTIPLIER:-2}
            local jitter_max=5
            local start_time=$(date +%s)
            
            while [ $retry_count -lt $max_retries ]; do
              FUNCTION_DETAILS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1)
              GET_STATUS=$?
              local current_time=$(date +%s)
              local elapsed_time=$((current_time - start_time))
              
              if [ $GET_STATUS -eq 0 ]; then
                break
              elif echo "$FUNCTION_DETAILS" | grep -q "ResourceConflictException\|TooManyRequestsException"; then
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  # Add jitter to backoff with elapsed time consideration
                  local jitter=$((RANDOM % jitter_max))
                  retry_delay=$(((retry_delay * backoff_multiplier) + jitter))
                  echo "Resource conflict or throttling detected at ${elapsed_time}s, retrying in ${retry_delay}s (attempt $retry_count/$max_retries)..."
                  echo "Last error: $FUNCTION_DETAILS"
                  sleep $retry_delay
                  continue
                fi
              elif echo "$FUNCTION_DETAILS" | grep -q "Function not found"; then
                echo "Function not found - it may be in the process of creation"
                return 8
              fi
              
              echo "Error getting Lambda function details at ${elapsed_time}s: $FUNCTION_DETAILS"
              return 2
            done
            
            # Extract and validate state information with enhanced error checking
            STATE=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.State')
            LAST_UPDATE=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastUpdateStatus')
            LAST_UPDATE_REASON=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastUpdateStatusReasonCode')
            CODE_SHA=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.CodeSha256')
            FUNCTION_ERROR=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastUpdateStatusReason')
            LAST_MODIFIED=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastModified')
            CREATION_TIME=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastModified')
            
            # Enhanced validation with more detailed error reporting
            if [ -z "$STATE" ] || [ "$STATE" = "null" ] || \
               [ -z "$LAST_UPDATE" ] || [ "$LAST_UPDATE" = "null" ]; then
              echo "ERROR: Invalid state information received at ${elapsed_time}s"
              echo "State: $STATE"
              echo "Last Update: $LAST_UPDATE"
              echo "Function Error: $FUNCTION_ERROR"
              echo "Creation Time: $CREATION_TIME"
              return 5
            fi
            
            echo "Current state: $STATE (at ${elapsed_time}s)"
            echo "Last update status: $LAST_UPDATE"
            echo "Last update reason: $LAST_UPDATE_REASON"
            echo "Code SHA: $CODE_SHA"
            echo "Last Modified: $LAST_MODIFIED"
            if [ ! -z "$FUNCTION_ERROR" ] && [ "$FUNCTION_ERROR" != "null" ]; then
              echo "Function error details: $FUNCTION_ERROR"
            fi
            
            # Enhanced state validation with improved error codes and Creating state handling
            case "$STATE" in
              "Failed")
                echo "ERROR: Lambda function is in Failed state"
                echo "Failure reason: $FUNCTION_ERROR"
                echo "Last Modified: $LAST_MODIFIED"
                return 3
                ;;
              "Pending")
                echo "Lambda function is in Pending state"
                echo "Last Modified: $LAST_MODIFIED"
                return 1
                ;;
              "Creating")
                echo "Lambda function is in Creating state"
                echo "Creation started at: $CREATION_TIME"
                echo "Elapsed time since last modification: ${elapsed_time}s"
                
                # Enhanced Creating state handling
                if [ $elapsed_time -gt $STATE_CHANGE_TIMEOUT ]; then
                  echo "WARNING: Function has been in Creating state for too long"
                  echo "Creation time: $CREATION_TIME"
                  echo "Elapsed time: ${elapsed_time}s"
                  echo "This may indicate a stuck deployment"
                  return 10
                fi
                
                # Check for specific creating state conditions
                if [ ! -z "$LAST_UPDATE_REASON" ] && [ "$LAST_UPDATE_REASON" != "null" ]; then
                  echo "Creation status reason: $LAST_UPDATE_REASON"
                fi
                
                return 9
                ;;
              "Active")
                case "$LAST_UPDATE" in
                  "Failed")
                    echo "ERROR: Last update failed with reason: $LAST_UPDATE_REASON"
                    echo "Error details: $FUNCTION_ERROR"
                    echo "Last Modified: $LAST_MODIFIED"
                    return 4
                    ;;
                  "InProgress")
                    echo "Update is still in progress (started at: $LAST_MODIFIED)"
                    return 1
                    ;;
                  "Creating")
                    echo "Function creation is in progress (started at: $CREATION_TIME)"
                    echo "Elapsed time: ${elapsed_time}s"
                    
                    # Enhanced creation progress tracking
                    if [ $elapsed_time -gt $STATE_CHANGE_TIMEOUT ]; then
                      echo "WARNING: Update has been in Creating state for too long"
                      echo "Start time: $CREATION_TIME"
                      echo "Elapsed time: ${elapsed_time}s"
                      if [ ! -z "$LAST_UPDATE_REASON" ]; then
                        echo "Last update reason: $LAST_UPDATE_REASON"
                      fi
                      return 10
                    fi
                    
                    # Enhanced progress tracking with detailed metrics
                    local progress_marker=$((elapsed_time / PROGRESS_INTERVAL))
                    local total_markers=20
                    local progress_percentage=$((progress_marker * 100 / total_markers))
                    printf "Progress: [%-${total_markers}s] %d%% (%ds)\n" \
                      "$(printf '#%.0s' $(seq 1 $progress_marker))" \
                      "$progress_percentage" \
                      "$elapsed_time"
                    
                    # Enhanced CloudWatch log monitoring
                    if [ $((elapsed_time % CLOUDWATCH_CHECK_INTERVAL)) -eq 0 ]; then
                      echo "Checking CloudWatch logs for recent events..."
                      # Get the latest log stream first
                      LATEST_STREAM=$(aws logs describe-log-streams \
                        --log-group-name "/aws/lambda/$FUNCTION_NAME" \
                        --order-by LastEventTime \
                        --descending \
                        --limit 1 2>/dev/null | \
                        jq -r '.logStreams[0].logStreamName') || true
                      
                      if [ ! -z "$LATEST_STREAM" ] && [ "$LATEST_STREAM" != "null" ]; then
                        # Fetch recent logs with error highlighting
                        echo "Latest logs from stream: $LATEST_STREAM"
                        aws logs get-log-events \
                          --log-group-name "/aws/lambda/$FUNCTION_NAME" \
                          --log-stream-name "$LATEST_STREAM" \
                          --start-time $(($(date +%s) - CLOUDWATCH_CHECK_INTERVAL))000 \
                          --limit 10 2>/dev/null | \
                        jq -r '.events[] | select(.message != null) | 
                          if (.message | test("(?i)error|exception|fail|timeout")) then
                            "    \u001b[31m" + .message + "\u001b[0m"  # Red for errors
                          elif (.message | test("(?i)warn|invalid")) then
                            "    \u001b[33m" + .message + "\u001b[0m"  # Yellow for warnings
                          else
                            "    " + .message
                          end' || true
                        
                        # Check for specific error patterns in logs
                        ERROR_COUNT=$(aws logs get-log-events \
                          --log-group-name "/aws/lambda/$FUNCTION_NAME" \
                          --log-stream-name "$LATEST_STREAM" \
                          --start-time $(($(date +%s) - 300))000 2>/dev/null | \
                        jq -r '.events[].message' | \
                        grep -iE "error|exception|fail|timeout" | wc -l) || true
                        
                        if [ "$ERROR_COUNT" -gt 0 ]; then
                          echo "WARNING: Detected $ERROR_COUNT error patterns in recent logs"
                        fi
                      else
                        echo "No recent log streams found"
                      fi
                    fi
                    
                    return 9
                    ;;
                  "Successful")
                    echo "Lambda function is in desired state"
                    echo "Last successful update: $LAST_MODIFIED"
                    return 0
                    ;;
                  *)
                    echo "WARNING: Unknown last update status: $LAST_UPDATE"
                    echo "Last Modified: $LAST_MODIFIED"
                    return 6
                    ;;
                esac
                ;;
              *)
                echo "WARNING: Unknown function state: $STATE"
                echo "Last Modified: $LAST_MODIFIED"
                return 7
                ;;
            esac
            
            echo "Lambda function is not in desired state"
            echo "Last Modified: $LAST_MODIFIED"
            return 1
          }
          
          # Function to wait for Lambda to be ready with enhanced error handling and backoff
          wait_for_lambda_ready() {
            # Use environment variables or defaults for configuration
            local max_attempts=${MAX_ATTEMPTS:-45}
            local initial_wait=${INITIAL_WAIT:-15}
            local max_wait=${MAX_WAIT:-90}
            local timeout_seconds=${TIMEOUT_SECONDS:-600}
            local start_time=$(date +%s)
            local consecutive_conflicts=0
            local wait_seconds=$initial_wait
            local last_error=""
            local creation_start_time=0
            local last_state=""
            local state_change_time=0
            local state_duration=0
            
            echo "Waiting for Lambda function to be ready (timeout: ${timeout_seconds}s)..."
            
            for ((i=1; i<=$max_attempts; i++)); do
              local current_time=$(date +%s)
              local elapsed_time=$((current_time - start_time))
              
              if [ $elapsed_time -ge $timeout_seconds ]; then
                echo "ERROR: Global timeout reached after ${elapsed_time} seconds"
                echo "State transition history:"
                echo "  - Initial state: $last_state"
                echo "  - Last state change: $state_duration seconds ago"
                if [ ! -z "$last_error" ]; then
                  echo "Last error encountered: $last_error"
                fi
                return 2
              fi
              
              check_lambda_state
              local check_status=$?
              
              # Enhanced state transition tracking with history
              if [ "$STATE" != "$last_state" ]; then
                if [ ! -z "$last_state" ]; then
                  state_duration=$((current_time - state_change_time))
                  
                  # Log state transition with detailed metrics
                  echo "State Transition Details:"
                  echo "  From: $last_state"
                  echo "  To: $STATE"
                  echo "  Duration in previous state: ${state_duration}s"
                  echo "  Total elapsed time: ${elapsed_time}s"
                  echo "  Update status: $LAST_UPDATE"
                  
                  # Validate minimum state time
                  if [ $state_duration -lt $MIN_STATE_TIME ]; then
                    echo "WARNING: State changed too quickly (${state_duration}s < ${MIN_STATE_TIME}s minimum)"
                    echo "This might indicate deployment instability"
                  fi
                  
                  # Check CloudWatch logs around transition
                  echo "Checking logs around state transition..."
                  aws logs get-log-events \
                    --log-group-name "/aws/lambda/$FUNCTION_NAME" \
                    --log-stream-name "\$LATEST" \
                    --start-time $(($(date +%s) - 30))000 \
                    --limit 3 2>/dev/null | \
                  jq -r '.events[] | "    " + .message' || true
                fi
                
                # Update state tracking
                last_state="$STATE"
                state_change_time=$current_time
                
                # Log new state context
                echo "New State Context:"
                echo "  State: $STATE"
                echo "  Last Update: $LAST_UPDATE"
                [ ! -z "$LAST_UPDATE_REASON" ] && echo "  Update Reason: $LAST_UPDATE_REASON"
                echo "  Modified: $LAST_MODIFIED"
              fi
              
              case $check_status in
                0)
                  local total_duration=$((current_time - start_time))
                  echo "SUCCESS: Lambda function is ready after $i attempts"
                  echo "Deployment statistics:"
                  echo "  - Total duration: ${total_duration}s"
                  echo "  - Final state: $STATE"
                  echo "  - Last update: $LAST_UPDATE"
                  echo "  - Last modified: $LAST_MODIFIED"
                  return 0
                  ;;
                1|9|10)  # Handle pending, creating, and timeout states
                  # Track creation/update progress with enhanced monitoring
                  if [ "$STATE" = "Creating" ] || [ "$LAST_UPDATE" = "Creating" ]; then
                    if [ $creation_start_time -eq 0 ]; then
                      creation_start_time=$current_time
                      echo "Function creation/update started at $(date -d @$creation_start_time)"
                      echo "Monitoring state transitions and progress..."
                    fi
                      
                    # Check for timeout in Creating state
                    if [ $check_status -eq 10 ]; then
                      echo "WARNING: Creation state timeout detected"
                      echo "Consider checking CloudWatch logs for issues"
                      # Continue but with increased wait time
                      wait_seconds=$max_wait
                    fi
                    
                    local progress_duration=$((current_time - creation_start_time))
                    echo "Creation/Update Progress:"
                    echo "  - Duration: ${progress_duration}s"
                    echo "  - State: $STATE"
                    echo "  - Update Status: $LAST_UPDATE"
                    [ ! -z "$LAST_UPDATE_REASON" ] && echo "  - Status Reason: $LAST_UPDATE_REASON"
                    
                    # Adjust wait time based on creation duration
                    if [ $progress_duration -gt 60 ]; then
                      wait_seconds=$((initial_wait * 2))  # Increase wait time for longer operations
                    fi
                  else
                    echo "Attempt $i/$max_attempts: Lambda not ready yet (${elapsed_time}s elapsed)"
                    echo "Current state: $STATE"
                    echo "Update status: $LAST_UPDATE"
                  fi
                  
                  # Reset conflict counter on non-conflict status
                  consecutive_conflicts=0
                  ;;
                2)
                  if echo "$FUNCTION_DETAILS" | grep -q "ResourceConflictException\|TooManyRequestsException"; then
                    consecutive_conflicts=$((consecutive_conflicts + 1))
                    # Enhanced exponential backoff for conflicts with jitter
                    local jitter=$((RANDOM % 5))
                    wait_seconds=$(((initial_wait * 2 ** consecutive_conflicts) + jitter))
                    if [ $wait_seconds -gt $max_wait ]; then
                      wait_seconds=$max_wait
                    fi
                    echo "Resource conflict or throttling detected (attempt $i):"
                    echo "  - Consecutive conflicts: $consecutive_conflicts"
                    echo "  - New wait time: ${wait_seconds}s"
                    last_error="Resource conflict/throttling after $consecutive_conflicts consecutive attempts"
                  else
                    echo "ERROR: Failed to get Lambda status (${elapsed_time}s elapsed)"
                    last_error="$FUNCTION_DETAILS"
                    return 3
                  fi
                  ;;
                3|4)
                  echo "ERROR: Lambda is in failed state (${elapsed_time}s elapsed)"
                  echo "Failure details:"
                  echo "  - State: $STATE"
                  echo "  - Last update: $LAST_UPDATE"
                  echo "  - Error reason: $LAST_UPDATE_REASON"
                  echo "  - Function error: $FUNCTION_ERROR"
                  last_error="Function state: $STATE, Last update status: $LAST_UPDATE, Reason: $LAST_UPDATE_REASON"
                  return 4
                  ;;
                5)
                  echo "ERROR: Invalid state information received (${elapsed_time}s elapsed)"
                  echo "State validation errors:"
                  echo "  - State: $STATE"
                  echo "  - Last update: $LAST_UPDATE"
                  echo "  - Creation time: $CREATION_TIME"
                  last_error="Invalid state data - State: $STATE, Last update: $LAST_UPDATE"
                  return 5
                  ;;
                6|7)
                  echo "WARNING: Unexpected state encountered (${elapsed_time}s elapsed)"
                  echo "State details:"
                  echo "  - Current state: $STATE"
                  echo "  - Last update: $LAST_UPDATE"
                  echo "  - Last modified: $LAST_MODIFIED"
                  last_error="Unexpected state - State: $STATE, Last update: $LAST_UPDATE"
                  wait_seconds=$((initial_wait * 2))  # Increase wait time for unknown states
                  ;;
                8)
                  echo "Function not found, waiting for creation to start..."
                  wait_seconds=$initial_wait
                  ;;
              esac
              
              # Dynamic wait time calculation with remaining time consideration
              local remaining_time=$((timeout_seconds - elapsed_time))
              if [ $remaining_time -lt $wait_seconds ]; then
                wait_seconds=$remaining_time
              fi
              
              if [ $wait_seconds -gt 0 ]; then
                echo "Next attempt in ${wait_seconds}s (${remaining_time}s remaining, attempt $i/$max_attempts)"
                sleep $wait_seconds
              fi
            done
            
            echo "ERROR: Maximum attempts ($max_attempts) reached after ${elapsed_time}s"
            echo "Deployment summary:"
            echo "  - Total duration: ${elapsed_time}s"
            echo "  - Final state: $STATE"
            echo "  - Last update status: $LAST_UPDATE"
            if [ ! -z "$last_error" ]; then
              echo "  - Last error: $last_error"
            fi
            return 1
          }
          
          # Set deployment configuration with enhanced timeouts and monitoring
          export MAX_RETRIES=15          # Maximum number of retries for state checks
          export INITIAL_WAIT=20         # Initial wait time between retries (seconds)
          export MAX_WAIT=180            # Maximum wait time between retries (seconds)
          export MAX_ATTEMPTS=90         # Maximum number of state check attempts
          export TIMEOUT_SECONDS=1200    # Global timeout for entire deployment (seconds)
          export BACKOFF_MULTIPLIER=2    # Multiplier for exponential backoff
          export STATE_CHANGE_TIMEOUT=600 # Maximum time to wait in a single state (seconds)
          
          # Additional monitoring parameters
          export PROGRESS_INTERVAL=30    # Interval for progress updates (seconds)
          export CONFLICT_MAX_RETRIES=8  # Maximum retries for conflict resolution
          export MIN_STATE_TIME=15       # Minimum time to wait before state transition (seconds)
          export CLOUDWATCH_CHECK_INTERVAL=45  # Interval for CloudWatch log checks (seconds)
          export CREATION_STATE_MAX_TIME=900   # Maximum time allowed in Creating state (seconds)
          export STATE_TRANSITION_BUFFER=30    # Buffer time for state transitions (seconds)

          # Initial state check before any updates
          echo "Performing initial Lambda state check..."
          wait_for_lambda_ready
          INITIAL_CHECK_STATUS=$?
          if [ $INITIAL_CHECK_STATUS -ne 0 ]; then
            echo "ERROR: Initial Lambda state check failed with status $INITIAL_CHECK_STATUS"
            exit 1
          fi
          
          # Update Lambda function code with error handling
          echo "Updating Lambda function code..."
          UPDATE_RESULT=$(aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://lambda-package.zip 2>&1)
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to update Lambda function code: $UPDATE_RESULT"
            exit 1
          fi
          
          # Wait for code update to complete with enhanced error handling
          echo "Waiting for code update to complete..."
          wait_for_lambda_ready
          CODE_UPDATE_STATUS=$?
          if [ $CODE_UPDATE_STATUS -ne 0 ]; then
            echo "ERROR: Code update verification failed with status $CODE_UPDATE_STATUS"
            exit 1
          fi
          
          # Update Lambda configuration with error handling
          echo "Updating Lambda function configuration..."
          CONFIG_UPDATE_RESULT=$(aws lambda update-function-configuration \
            --function-name $FUNCTION_NAME \
            --handler app.main.handler \
            --runtime python3.9 \
            --timeout 30 \
            --memory-size 256 \
            --environment Variables="{
              STAGE=production,
              DB_HOST=${{ secrets.PROD_DB_HOST }},
              DB_PORT=${{ secrets.PROD_DB_PORT }},
              DB_USER=${{ secrets.PROD_DB_USER }},
              DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }},
              DB_NAME=${{ secrets.PROD_DB_NAME }},
              REDIS_HOST=${{ secrets.PROD_REDIS_HOST }},
              REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
            }" 2>&1)
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to update Lambda configuration: $CONFIG_UPDATE_RESULT"
            exit 1
          fi
          
          # Wait for configuration update to complete with enhanced error handling
          echo "Waiting for configuration update to complete..."
          wait_for_lambda_ready
          CONFIG_UPDATE_STATUS=$?
          if [ $CONFIG_UPDATE_STATUS -ne 0 ]; then
            echo "ERROR: Configuration update verification failed with status $CONFIG_UPDATE_STATUS"
            exit 1
          fi
          
          # Publish new version with error handling
          echo "Publishing new version..."
          PUBLISH_RESULT=$(aws lambda publish-version \
            --function-name $FUNCTION_NAME \
            --description "Deployment of version $VERSION" 2>&1)
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to publish new version: $PUBLISH_RESULT"
            exit 1
          fi
          
          # Final verification with enhanced error handling
          echo "Performing final verification..."
          wait_for_lambda_ready
          FINAL_STATUS=$?
          if [ $FINAL_STATUS -ne 0 ]; then
            echo "ERROR: Final verification failed with status $FINAL_STATUS"
            exit 1
          fi
          
          echo "SUCCESS: Lambda deployment completed successfully"
          
          # Output final Lambda function state
          echo "Final Lambda function state:"
          check_lambda_state
