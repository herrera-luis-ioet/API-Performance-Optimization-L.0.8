name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      # Setup Redis service for testing
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev
      
      - name: Run code formatting check
        run: |
          poetry run black --check .
          poetry run isort --check-only --profile black .
      
      - name: Run linting
        run: poetry run flake8 .
      
      - name: Run type checking
        run: poetry run mypy app tests
      
      - name: Run security checks
        run: |
          poetry add --group dev bandit safety
          poetry run bandit -r app
          poetry run safety check
      
      - name: Run tests with coverage
        run: poetry run pytest --cov=app --cov-report=xml
        env:
          SQLALCHEMY_DATABASE_URI: sqlite+aiosqlite:///:memory:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 0
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: api-performance-optimization:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
          load: true
      
      - name: Test Docker image
        run: |
          docker run --rm api-performance-optimization:${{ github.sha }} poetry run pytest -xvs tests/