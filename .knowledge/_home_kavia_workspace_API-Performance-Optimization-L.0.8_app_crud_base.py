{"is_source_file": true, "format": "Python", "description": "Base CRUD class implementation for performing common database operations asynchronously using SQLAlchemy and Pydantic.", "external_files": ["app.db.base"], "external_methods": ["select", "update", "delete", "func"], "published": ["BaseCRUD"], "classes": [{"name": "BaseCRUD", "description": "Generic class for performing create, read, update, and delete operations on a SQLAlchemy model."}], "methods": [{"name": "ModelType create(self, db: AsyncSession, *, obj_in: CreateSchemaType)", "description": "Creates a new record in the database based on the provided input data.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "Optional[ModelType] get(self, db: AsyncSession, id: Any)", "description": "Retrieves a record from the database based on the specified ID.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "List[ModelType] get_multi( self, db: AsyncSession, *, skip: int = 0, limit: int = 100 )", "description": "Fetches multiple records with pagination support.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "ModelType update( self, db: AsyncSession, *, db_obj: ModelType, obj_in: Union[UpdateSchemaType, Dict[str, Any]] )", "description": "Updates an existing record in the database with new data.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "Optional[ModelType] remove(self, db: AsyncSession, *, id: Any)", "description": "Removes a record from the database based on the specified ID.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "int count(self, db: AsyncSession)", "description": "Counts the total number of records in the database.", "scope": "BaseCRUD", "scopeKind": "class"}, {"name": "__init__(self, model: Type[ModelType])", "scope": "BaseCRUD", "scopeKind": "class", "description": "unavailable"}], "calls": ["select", "jsonable_encoder", "db.add", "db.commit", "db.refresh", "db.rollback", "db.execute", "db.delete"], "search-terms": ["CRUD operations", "async SQLAlchemy", "Pydantic models"], "state": 2, "file_id": 21, "knowledge_revision": 47, "git_revision": "", "ctags": [{"_type": "tag", "name": "BaseCRUD", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^class BaseCRUD(Generic[ModelType, CreateSchemaType, UpdateSchemaType, ReadSchemaType]):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "CreateSchemaType", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ModelType", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^ModelType = TypeVar(\"ModelType\", bound=Base)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ReadSchemaType", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^ReadSchemaType = TypeVar(\"ReadSchemaType\", bound=BaseModel)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "UpdateSchemaType", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    def __init__(self, model: Type[ModelType]):$/", "language": "Python", "kind": "member", "signature": "(self, model: Type[ModelType])", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "count", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def count(self, db: AsyncSession) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "member", "signature": "(self, db: AsyncSession)", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def create(self, db: AsyncSession, *, obj_in: CreateSchemaType) -> ModelType:$/", "language": "Python", "typeref": "typename:ModelType", "kind": "member", "signature": "(self, db: AsyncSession, *, obj_in: CreateSchemaType)", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def get(self, db: AsyncSession, id: Any) -> Optional[ModelType]:$/", "language": "Python", "typeref": "typename:Optional[ModelType]", "kind": "member", "signature": "(self, db: AsyncSession, id: Any)", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "get_multi", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def get_multi($/", "language": "Python", "typeref": "typename:List[ModelType]", "kind": "member", "signature": "( self, db: AsyncSession, *, skip: int = 0, limit: int = 100 )", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "remove", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def remove(self, db: AsyncSession, *, id: Any) -> Optional[ModelType]:$/", "language": "Python", "typeref": "typename:Optional[ModelType]", "kind": "member", "signature": "(self, db: AsyncSession, *, id: Any)", "scope": "BaseCRUD", "scopeKind": "class"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "pattern": "/^    async def update($/", "language": "Python", "typeref": "typename:ModelType", "kind": "member", "signature": "( self, db: AsyncSession, *, db_obj: ModelType, obj_in: Union[UpdateSchemaType, Dict[str, Any]] )", "scope": "BaseCRUD", "scopeKind": "class"}], "filename": "/home/kavia/workspace/API-Performance-Optimization-L.0.8/app/crud/base.py", "hash": "18352e12ed1c7f913c8efbc88903f8e0", "format-version": 4, "code-base-name": "default", "fields": [{"name": "CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ModelType = TypeVar(\"ModelType\", bound=Base)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ReadSchemaType = TypeVar(\"ReadSchemaType\", bound=BaseModel)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"47": ""}]}